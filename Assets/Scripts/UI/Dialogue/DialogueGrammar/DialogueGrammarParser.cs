//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from DialogueGrammar.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class DialogueGrammarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, IF=37, ELSE=38, JUMP=39, 
		SELECT=40, TITLE=41, TRUE=42, FALSE=43, NUMBER=44, STRING=45, INTERP_STRING=46, 
		NON_INTERP_STRING=47, BOOL=48, IDENTIFIER=49, NEWLINE=50, COMMENT=51, 
		WS=52;
	public const int
		RULE_script = 0, RULE_titleBlock = 1, RULE_titleMeta = 2, RULE_metaEntry = 3, 
		RULE_statement = 4, RULE_compoundStatement = 5, RULE_statementList = 6, 
		RULE_declarationStatement = 7, RULE_exprStatement = 8, RULE_dialogueStatement = 9, 
		RULE_selectStatement = 10, RULE_selectList = 11, RULE_selection = 12, 
		RULE_ifStatement = 13, RULE_jumpStatement = 14, RULE_declaration = 15, 
		RULE_initDeclaratorList = 16, RULE_initDeclarator = 17, RULE_type = 18, 
		RULE_declarator = 19, RULE_initializer = 20, RULE_initializerList = 21, 
		RULE_expr = 22, RULE_constantExpr = 23, RULE_assignExpr = 24, RULE_assignOperator = 25, 
		RULE_orExpr = 26, RULE_andExpr = 27, RULE_equalityExpr = 28, RULE_relationalExpr = 29, 
		RULE_additiveExpr = 30, RULE_multiplicativeExpr = 31, RULE_powerExpr = 32, 
		RULE_unaryExpr = 33, RULE_postfixExpr = 34, RULE_argumentExprList = 35, 
		RULE_primaryExpr = 36, RULE_value = 37;
	public static readonly string[] ruleNames = {
		"script", "titleBlock", "titleMeta", "metaEntry", "statement", "compoundStatement", 
		"statementList", "declarationStatement", "exprStatement", "dialogueStatement", 
		"selectStatement", "selectList", "selection", "ifStatement", "jumpStatement", 
		"declaration", "initDeclaratorList", "initDeclarator", "type", "declarator", 
		"initializer", "initializerList", "expr", "constantExpr", "assignExpr", 
		"assignOperator", "orExpr", "andExpr", "equalityExpr", "relationalExpr", 
		"additiveExpr", "multiplicativeExpr", "powerExpr", "unaryExpr", "postfixExpr", 
		"argumentExprList", "primaryExpr", "value"
	};

	private static readonly string[] _LiteralNames = {
		null, "'<'", "'>'", "'description'", "':'", "'position'", "'('", "','", 
		"')'", "'{'", "'}'", "'='", "'num'", "'string'", "'bool'", "'Sprite'", 
		"'Image'", "'['", "']'", "'*='", "'/='", "'%='", "'+='", "'-='", "'||'", 
		"'&&'", "'=='", "'!='", "'>='", "'<='", "'+'", "'-'", "'*'", "'/'", "'%'", 
		"'**'", "'!'", "'if'", "'else'", "'Jump'", "'Select'", "'Title'", "'true'", 
		"'false'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, "IF", "ELSE", "JUMP", "SELECT", "TITLE", "TRUE", "FALSE", "NUMBER", 
		"STRING", "INTERP_STRING", "NON_INTERP_STRING", "BOOL", "IDENTIFIER", 
		"NEWLINE", "COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DialogueGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static DialogueGrammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public DialogueGrammarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public DialogueGrammarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ScriptContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(DialogueGrammarParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TitleBlockContext[] titleBlock() {
			return GetRuleContexts<TitleBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TitleBlockContext titleBlock(int i) {
			return GetRuleContext<TitleBlockContext>(i);
		}
		public ScriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_script; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDialogueGrammarListener typedListener = listener as IDialogueGrammarListener;
			if (typedListener != null) typedListener.EnterScript(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDialogueGrammarListener typedListener = listener as IDialogueGrammarListener;
			if (typedListener != null) typedListener.ExitScript(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDialogueGrammarVisitor<TResult> typedVisitor = visitor as IDialogueGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScript(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScriptContext script() {
		ScriptContext _localctx = new ScriptContext(Context, State);
		EnterRule(_localctx, 0, RULE_script);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TITLE) {
				{
				{
				State = 76;
				titleBlock();
				}
				}
				State = 81;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 82;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TitleBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TITLE() { return GetToken(DialogueGrammarParser.TITLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(DialogueGrammarParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TitleMetaContext titleMeta() {
			return GetRuleContext<TitleMetaContext>(0);
		}
		public TitleBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_titleBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDialogueGrammarListener typedListener = listener as IDialogueGrammarListener;
			if (typedListener != null) typedListener.EnterTitleBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDialogueGrammarListener typedListener = listener as IDialogueGrammarListener;
			if (typedListener != null) typedListener.ExitTitleBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDialogueGrammarVisitor<TResult> typedVisitor = visitor as IDialogueGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTitleBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TitleBlockContext titleBlock() {
		TitleBlockContext _localctx = new TitleBlockContext(Context, State);
		EnterRule(_localctx, 2, RULE_titleBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84;
			Match(TITLE);
			State = 85;
			Match(IDENTIFIER);
			State = 87;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0) {
				{
				State = 86;
				titleMeta();
				}
			}

			State = 89;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TitleMetaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MetaEntryContext[] metaEntry() {
			return GetRuleContexts<MetaEntryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MetaEntryContext metaEntry(int i) {
			return GetRuleContext<MetaEntryContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(DialogueGrammarParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(DialogueGrammarParser.NEWLINE, i);
		}
		public TitleMetaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_titleMeta; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDialogueGrammarListener typedListener = listener as IDialogueGrammarListener;
			if (typedListener != null) typedListener.EnterTitleMeta(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDialogueGrammarListener typedListener = listener as IDialogueGrammarListener;
			if (typedListener != null) typedListener.ExitTitleMeta(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDialogueGrammarVisitor<TResult> typedVisitor = visitor as IDialogueGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTitleMeta(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TitleMetaContext titleMeta() {
		TitleMetaContext _localctx = new TitleMetaContext(Context, State);
		EnterRule(_localctx, 4, RULE_titleMeta);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 91;
			Match(T__0);
			State = 97;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 92;
					metaEntry();
					State = 93;
					Match(NEWLINE);
					}
					} 
				}
				State = 99;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			State = 101;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__2 || _la==T__4) {
				{
				State = 100;
				metaEntry();
				}
			}

			State = 103;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MetaEntryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(DialogueGrammarParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NUMBER() { return GetTokens(DialogueGrammarParser.NUMBER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER(int i) {
			return GetToken(DialogueGrammarParser.NUMBER, i);
		}
		public MetaEntryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_metaEntry; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDialogueGrammarListener typedListener = listener as IDialogueGrammarListener;
			if (typedListener != null) typedListener.EnterMetaEntry(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDialogueGrammarListener typedListener = listener as IDialogueGrammarListener;
			if (typedListener != null) typedListener.ExitMetaEntry(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDialogueGrammarVisitor<TResult> typedVisitor = visitor as IDialogueGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMetaEntry(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MetaEntryContext metaEntry() {
		MetaEntryContext _localctx = new MetaEntryContext(Context, State);
		EnterRule(_localctx, 6, RULE_metaEntry);
		try {
			State = 115;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__2:
				EnterOuterAlt(_localctx, 1);
				{
				State = 105;
				Match(T__2);
				State = 106;
				Match(T__3);
				State = 107;
				Match(STRING);
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 2);
				{
				State = 108;
				Match(T__4);
				State = 109;
				Match(T__3);
				State = 110;
				Match(T__5);
				State = 111;
				Match(NUMBER);
				State = 112;
				Match(T__6);
				State = 113;
				Match(NUMBER);
				State = 114;
				Match(T__7);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationStatementContext declarationStatement() {
			return GetRuleContext<DeclarationStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprStatementContext exprStatement() {
			return GetRuleContext<ExprStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DialogueStatementContext dialogueStatement() {
			return GetRuleContext<DialogueStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public JumpStatementContext jumpStatement() {
			return GetRuleContext<JumpStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDialogueGrammarListener typedListener = listener as IDialogueGrammarListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDialogueGrammarListener typedListener = listener as IDialogueGrammarListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDialogueGrammarVisitor<TResult> typedVisitor = visitor as IDialogueGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_statement);
		try {
			State = 124;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 117;
				compoundStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 118;
				declarationStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 119;
				exprStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 120;
				dialogueStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 121;
				selectStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 122;
				ifStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 123;
				jumpStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompoundStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public CompoundStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compoundStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDialogueGrammarListener typedListener = listener as IDialogueGrammarListener;
			if (typedListener != null) typedListener.EnterCompoundStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDialogueGrammarListener typedListener = listener as IDialogueGrammarListener;
			if (typedListener != null) typedListener.ExitCompoundStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDialogueGrammarVisitor<TResult> typedVisitor = visitor as IDialogueGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompoundStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompoundStatementContext compoundStatement() {
		CompoundStatementContext _localctx = new CompoundStatementContext(Context, State);
		EnterRule(_localctx, 10, RULE_compoundStatement);
		try {
			State = 132;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 126;
				Match(T__8);
				State = 127;
				Match(T__9);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 128;
				Match(T__8);
				State = 129;
				statementList();
				State = 130;
				Match(T__9);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(DialogueGrammarParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(DialogueGrammarParser.NEWLINE, i);
		}
		public StatementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDialogueGrammarListener typedListener = listener as IDialogueGrammarListener;
			if (typedListener != null) typedListener.EnterStatementList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDialogueGrammarListener typedListener = listener as IDialogueGrammarListener;
			if (typedListener != null) typedListener.ExitStatementList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDialogueGrammarVisitor<TResult> typedVisitor = visitor as IDialogueGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementListContext statementList() {
		StatementListContext _localctx = new StatementListContext(Context, State);
		EnterRule(_localctx, 12, RULE_statementList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 139;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 134;
					statement();
					State = 135;
					Match(NEWLINE);
					}
					} 
				}
				State = 141;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			State = 142;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public DeclarationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDialogueGrammarListener typedListener = listener as IDialogueGrammarListener;
			if (typedListener != null) typedListener.EnterDeclarationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDialogueGrammarListener typedListener = listener as IDialogueGrammarListener;
			if (typedListener != null) typedListener.ExitDeclarationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDialogueGrammarVisitor<TResult> typedVisitor = visitor as IDialogueGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationStatementContext declarationStatement() {
		DeclarationStatementContext _localctx = new DeclarationStatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_declarationStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144;
			declaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ExprStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDialogueGrammarListener typedListener = listener as IDialogueGrammarListener;
			if (typedListener != null) typedListener.EnterExprStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDialogueGrammarListener typedListener = listener as IDialogueGrammarListener;
			if (typedListener != null) typedListener.ExitExprStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDialogueGrammarVisitor<TResult> typedVisitor = visitor as IDialogueGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprStatementContext exprStatement() {
		ExprStatementContext _localctx = new ExprStatementContext(Context, State);
		EnterRule(_localctx, 16, RULE_exprStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 146;
			expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DialogueStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(DialogueGrammarParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(DialogueGrammarParser.STRING, 0); }
		public DialogueStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dialogueStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDialogueGrammarListener typedListener = listener as IDialogueGrammarListener;
			if (typedListener != null) typedListener.EnterDialogueStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDialogueGrammarListener typedListener = listener as IDialogueGrammarListener;
			if (typedListener != null) typedListener.ExitDialogueStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDialogueGrammarVisitor<TResult> typedVisitor = visitor as IDialogueGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDialogueStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DialogueStatementContext dialogueStatement() {
		DialogueStatementContext _localctx = new DialogueStatementContext(Context, State);
		EnterRule(_localctx, 18, RULE_dialogueStatement);
		try {
			State = 152;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 148;
				Match(IDENTIFIER);
				State = 149;
				Match(T__3);
				State = 150;
				Match(STRING);
				}
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 151;
				Match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(DialogueGrammarParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectListContext selectList() {
			return GetRuleContext<SelectListContext>(0);
		}
		public SelectStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDialogueGrammarListener typedListener = listener as IDialogueGrammarListener;
			if (typedListener != null) typedListener.EnterSelectStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDialogueGrammarListener typedListener = listener as IDialogueGrammarListener;
			if (typedListener != null) typedListener.ExitSelectStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDialogueGrammarVisitor<TResult> typedVisitor = visitor as IDialogueGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectStatementContext selectStatement() {
		SelectStatementContext _localctx = new SelectStatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_selectStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 154;
			Match(SELECT);
			State = 155;
			Match(T__8);
			State = 156;
			selectList();
			State = 157;
			Match(T__9);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectionContext[] selection() {
			return GetRuleContexts<SelectionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectionContext selection(int i) {
			return GetRuleContext<SelectionContext>(i);
		}
		public SelectListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDialogueGrammarListener typedListener = listener as IDialogueGrammarListener;
			if (typedListener != null) typedListener.EnterSelectList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDialogueGrammarListener typedListener = listener as IDialogueGrammarListener;
			if (typedListener != null) typedListener.ExitSelectList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDialogueGrammarVisitor<TResult> typedVisitor = visitor as IDialogueGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectListContext selectList() {
		SelectListContext _localctx = new SelectListContext(Context, State);
		EnterRule(_localctx, 22, RULE_selectList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 162;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 159;
					selection();
					}
					} 
				}
				State = 164;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			State = 165;
			selection();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(DialogueGrammarParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public SelectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDialogueGrammarListener typedListener = listener as IDialogueGrammarListener;
			if (typedListener != null) typedListener.EnterSelection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDialogueGrammarListener typedListener = listener as IDialogueGrammarListener;
			if (typedListener != null) typedListener.ExitSelection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDialogueGrammarVisitor<TResult> typedVisitor = visitor as IDialogueGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectionContext selection() {
		SelectionContext _localctx = new SelectionContext(Context, State);
		EnterRule(_localctx, 24, RULE_selection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 167;
			Match(STRING);
			State = 168;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(DialogueGrammarParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(DialogueGrammarParser.ELSE, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDialogueGrammarListener typedListener = listener as IDialogueGrammarListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDialogueGrammarListener typedListener = listener as IDialogueGrammarListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDialogueGrammarVisitor<TResult> typedVisitor = visitor as IDialogueGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 26, RULE_ifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 170;
			Match(IF);
			State = 171;
			Match(T__5);
			State = 172;
			expr();
			State = 173;
			Match(T__7);
			State = 174;
			statement();
			State = 177;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				State = 175;
				Match(ELSE);
				State = 176;
				statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JumpStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JUMP() { return GetToken(DialogueGrammarParser.JUMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(DialogueGrammarParser.IDENTIFIER, 0); }
		public JumpStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jumpStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDialogueGrammarListener typedListener = listener as IDialogueGrammarListener;
			if (typedListener != null) typedListener.EnterJumpStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDialogueGrammarListener typedListener = listener as IDialogueGrammarListener;
			if (typedListener != null) typedListener.ExitJumpStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDialogueGrammarVisitor<TResult> typedVisitor = visitor as IDialogueGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJumpStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JumpStatementContext jumpStatement() {
		JumpStatementContext _localctx = new JumpStatementContext(Context, State);
		EnterRule(_localctx, 28, RULE_jumpStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 179;
			Match(JUMP);
			State = 180;
			Match(T__5);
			State = 181;
			Match(IDENTIFIER);
			State = 182;
			Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InitDeclaratorListContext initDeclaratorList() {
			return GetRuleContext<InitDeclaratorListContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDialogueGrammarListener typedListener = listener as IDialogueGrammarListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDialogueGrammarListener typedListener = listener as IDialogueGrammarListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDialogueGrammarVisitor<TResult> typedVisitor = visitor as IDialogueGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 30, RULE_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 184;
			type();
			State = 185;
			initDeclaratorList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitDeclaratorListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InitDeclaratorContext[] initDeclarator() {
			return GetRuleContexts<InitDeclaratorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InitDeclaratorContext initDeclarator(int i) {
			return GetRuleContext<InitDeclaratorContext>(i);
		}
		public InitDeclaratorListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initDeclaratorList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDialogueGrammarListener typedListener = listener as IDialogueGrammarListener;
			if (typedListener != null) typedListener.EnterInitDeclaratorList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDialogueGrammarListener typedListener = listener as IDialogueGrammarListener;
			if (typedListener != null) typedListener.ExitInitDeclaratorList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDialogueGrammarVisitor<TResult> typedVisitor = visitor as IDialogueGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitDeclaratorList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitDeclaratorListContext initDeclaratorList() {
		InitDeclaratorListContext _localctx = new InitDeclaratorListContext(Context, State);
		EnterRule(_localctx, 32, RULE_initDeclaratorList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 192;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 187;
					initDeclarator();
					State = 188;
					Match(T__6);
					}
					} 
				}
				State = 194;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			State = 195;
			initDeclarator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitDeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InitializerContext initializer() {
			return GetRuleContext<InitializerContext>(0);
		}
		public InitDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initDeclarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDialogueGrammarListener typedListener = listener as IDialogueGrammarListener;
			if (typedListener != null) typedListener.EnterInitDeclarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDialogueGrammarListener typedListener = listener as IDialogueGrammarListener;
			if (typedListener != null) typedListener.ExitInitDeclarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDialogueGrammarVisitor<TResult> typedVisitor = visitor as IDialogueGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitDeclaratorContext initDeclarator() {
		InitDeclaratorContext _localctx = new InitDeclaratorContext(Context, State);
		EnterRule(_localctx, 34, RULE_initDeclarator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197;
			declarator(0);
			State = 198;
			Match(T__10);
			State = 199;
			initializer();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDialogueGrammarListener typedListener = listener as IDialogueGrammarListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDialogueGrammarListener typedListener = listener as IDialogueGrammarListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDialogueGrammarVisitor<TResult> typedVisitor = visitor as IDialogueGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 36, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 201;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 126976L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(DialogueGrammarParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		public DeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDialogueGrammarListener typedListener = listener as IDialogueGrammarListener;
			if (typedListener != null) typedListener.EnterDeclarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDialogueGrammarListener typedListener = listener as IDialogueGrammarListener;
			if (typedListener != null) typedListener.ExitDeclarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDialogueGrammarVisitor<TResult> typedVisitor = visitor as IDialogueGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclaratorContext declarator() {
		return declarator(0);
	}

	private DeclaratorContext declarator(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		DeclaratorContext _localctx = new DeclaratorContext(Context, _parentState);
		DeclaratorContext _prevctx = _localctx;
		int _startState = 38;
		EnterRecursionRule(_localctx, 38, RULE_declarator, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 204;
			Match(IDENTIFIER);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 211;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new DeclaratorContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_declarator);
					State = 206;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 207;
					Match(T__16);
					State = 208;
					Match(T__17);
					}
					} 
				}
				State = 213;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class InitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignExprContext assignExpr() {
			return GetRuleContext<AssignExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InitializerListContext initializerList() {
			return GetRuleContext<InitializerListContext>(0);
		}
		public InitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDialogueGrammarListener typedListener = listener as IDialogueGrammarListener;
			if (typedListener != null) typedListener.EnterInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDialogueGrammarListener typedListener = listener as IDialogueGrammarListener;
			if (typedListener != null) typedListener.ExitInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDialogueGrammarVisitor<TResult> typedVisitor = visitor as IDialogueGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitializerContext initializer() {
		InitializerContext _localctx = new InitializerContext(Context, State);
		EnterRule(_localctx, 40, RULE_initializer);
		try {
			State = 224;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 214;
				assignExpr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 215;
				Match(T__8);
				State = 216;
				initializerList();
				State = 217;
				Match(T__9);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 219;
				Match(T__8);
				State = 220;
				initializerList();
				State = 221;
				Match(T__6);
				State = 222;
				Match(T__9);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitializerListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InitializerContext[] initializer() {
			return GetRuleContexts<InitializerContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InitializerContext initializer(int i) {
			return GetRuleContext<InitializerContext>(i);
		}
		public InitializerListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializerList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDialogueGrammarListener typedListener = listener as IDialogueGrammarListener;
			if (typedListener != null) typedListener.EnterInitializerList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDialogueGrammarListener typedListener = listener as IDialogueGrammarListener;
			if (typedListener != null) typedListener.ExitInitializerList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDialogueGrammarVisitor<TResult> typedVisitor = visitor as IDialogueGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitializerList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitializerListContext initializerList() {
		InitializerListContext _localctx = new InitializerListContext(Context, State);
		EnterRule(_localctx, 42, RULE_initializerList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 231;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 226;
					initializer();
					State = 227;
					Match(T__6);
					}
					} 
				}
				State = 233;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			State = 234;
			initializer();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignExprContext[] assignExpr() {
			return GetRuleContexts<AssignExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignExprContext assignExpr(int i) {
			return GetRuleContext<AssignExprContext>(i);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDialogueGrammarListener typedListener = listener as IDialogueGrammarListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDialogueGrammarListener typedListener = listener as IDialogueGrammarListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDialogueGrammarVisitor<TResult> typedVisitor = visitor as IDialogueGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 44, RULE_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 236;
			assignExpr();
			State = 241;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__6) {
				{
				{
				State = 237;
				Match(T__6);
				State = 238;
				assignExpr();
				}
				}
				State = 243;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OrExprContext orExpr() {
			return GetRuleContext<OrExprContext>(0);
		}
		public ConstantExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDialogueGrammarListener typedListener = listener as IDialogueGrammarListener;
			if (typedListener != null) typedListener.EnterConstantExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDialogueGrammarListener typedListener = listener as IDialogueGrammarListener;
			if (typedListener != null) typedListener.ExitConstantExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDialogueGrammarVisitor<TResult> typedVisitor = visitor as IDialogueGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantExprContext constantExpr() {
		ConstantExprContext _localctx = new ConstantExprContext(Context, State);
		EnterRule(_localctx, 46, RULE_constantExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 244;
			orExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OrExprContext orExpr() {
			return GetRuleContext<OrExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExprContext unaryExpr() {
			return GetRuleContext<UnaryExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignOperatorContext assignOperator() {
			return GetRuleContext<AssignOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignExprContext assignExpr() {
			return GetRuleContext<AssignExprContext>(0);
		}
		public AssignExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDialogueGrammarListener typedListener = listener as IDialogueGrammarListener;
			if (typedListener != null) typedListener.EnterAssignExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDialogueGrammarListener typedListener = listener as IDialogueGrammarListener;
			if (typedListener != null) typedListener.ExitAssignExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDialogueGrammarVisitor<TResult> typedVisitor = visitor as IDialogueGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignExprContext assignExpr() {
		AssignExprContext _localctx = new AssignExprContext(Context, State);
		EnterRule(_localctx, 48, RULE_assignExpr);
		try {
			State = 251;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 246;
				orExpr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 247;
				unaryExpr();
				State = 248;
				assignOperator();
				State = 249;
				assignExpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignOperatorContext : ParserRuleContext {
		public AssignOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDialogueGrammarListener typedListener = listener as IDialogueGrammarListener;
			if (typedListener != null) typedListener.EnterAssignOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDialogueGrammarListener typedListener = listener as IDialogueGrammarListener;
			if (typedListener != null) typedListener.ExitAssignOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDialogueGrammarVisitor<TResult> typedVisitor = visitor as IDialogueGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignOperatorContext assignOperator() {
		AssignOperatorContext _localctx = new AssignOperatorContext(Context, State);
		EnterRule(_localctx, 50, RULE_assignOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 253;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 16254976L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AndExprContext[] andExpr() {
			return GetRuleContexts<AndExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AndExprContext andExpr(int i) {
			return GetRuleContext<AndExprContext>(i);
		}
		public OrExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDialogueGrammarListener typedListener = listener as IDialogueGrammarListener;
			if (typedListener != null) typedListener.EnterOrExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDialogueGrammarListener typedListener = listener as IDialogueGrammarListener;
			if (typedListener != null) typedListener.ExitOrExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDialogueGrammarVisitor<TResult> typedVisitor = visitor as IDialogueGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrExprContext orExpr() {
		OrExprContext _localctx = new OrExprContext(Context, State);
		EnterRule(_localctx, 52, RULE_orExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 255;
			andExpr();
			State = 260;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__23) {
				{
				{
				State = 256;
				Match(T__23);
				State = 257;
				andExpr();
				}
				}
				State = 262;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AndExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EqualityExprContext[] equalityExpr() {
			return GetRuleContexts<EqualityExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualityExprContext equalityExpr(int i) {
			return GetRuleContext<EqualityExprContext>(i);
		}
		public AndExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_andExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDialogueGrammarListener typedListener = listener as IDialogueGrammarListener;
			if (typedListener != null) typedListener.EnterAndExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDialogueGrammarListener typedListener = listener as IDialogueGrammarListener;
			if (typedListener != null) typedListener.ExitAndExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDialogueGrammarVisitor<TResult> typedVisitor = visitor as IDialogueGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AndExprContext andExpr() {
		AndExprContext _localctx = new AndExprContext(Context, State);
		EnterRule(_localctx, 54, RULE_andExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 263;
			equalityExpr();
			State = 268;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__24) {
				{
				{
				State = 264;
				Match(T__24);
				State = 265;
				equalityExpr();
				}
				}
				State = 270;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqualityExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RelationalExprContext[] relationalExpr() {
			return GetRuleContexts<RelationalExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationalExprContext relationalExpr(int i) {
			return GetRuleContext<RelationalExprContext>(i);
		}
		public EqualityExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalityExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDialogueGrammarListener typedListener = listener as IDialogueGrammarListener;
			if (typedListener != null) typedListener.EnterEqualityExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDialogueGrammarListener typedListener = listener as IDialogueGrammarListener;
			if (typedListener != null) typedListener.ExitEqualityExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDialogueGrammarVisitor<TResult> typedVisitor = visitor as IDialogueGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqualityExprContext equalityExpr() {
		EqualityExprContext _localctx = new EqualityExprContext(Context, State);
		EnterRule(_localctx, 56, RULE_equalityExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 271;
			relationalExpr();
			State = 276;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__25 || _la==T__26) {
				{
				{
				State = 272;
				_la = TokenStream.LA(1);
				if ( !(_la==T__25 || _la==T__26) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 273;
				relationalExpr();
				}
				}
				State = 278;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationalExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AdditiveExprContext[] additiveExpr() {
			return GetRuleContexts<AdditiveExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdditiveExprContext additiveExpr(int i) {
			return GetRuleContext<AdditiveExprContext>(i);
		}
		public RelationalExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationalExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDialogueGrammarListener typedListener = listener as IDialogueGrammarListener;
			if (typedListener != null) typedListener.EnterRelationalExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDialogueGrammarListener typedListener = listener as IDialogueGrammarListener;
			if (typedListener != null) typedListener.ExitRelationalExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDialogueGrammarVisitor<TResult> typedVisitor = visitor as IDialogueGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationalExprContext relationalExpr() {
		RelationalExprContext _localctx = new RelationalExprContext(Context, State);
		EnterRule(_localctx, 58, RULE_relationalExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 279;
			additiveExpr();
			State = 284;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 805306374L) != 0)) {
				{
				{
				State = 280;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 805306374L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 281;
				additiveExpr();
				}
				}
				State = 286;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdditiveExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicativeExprContext[] multiplicativeExpr() {
			return GetRuleContexts<MultiplicativeExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicativeExprContext multiplicativeExpr(int i) {
			return GetRuleContext<MultiplicativeExprContext>(i);
		}
		public AdditiveExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additiveExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDialogueGrammarListener typedListener = listener as IDialogueGrammarListener;
			if (typedListener != null) typedListener.EnterAdditiveExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDialogueGrammarListener typedListener = listener as IDialogueGrammarListener;
			if (typedListener != null) typedListener.ExitAdditiveExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDialogueGrammarVisitor<TResult> typedVisitor = visitor as IDialogueGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdditiveExprContext additiveExpr() {
		AdditiveExprContext _localctx = new AdditiveExprContext(Context, State);
		EnterRule(_localctx, 60, RULE_additiveExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 287;
			multiplicativeExpr();
			State = 292;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__29 || _la==T__30) {
				{
				{
				State = 288;
				_la = TokenStream.LA(1);
				if ( !(_la==T__29 || _la==T__30) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 289;
				multiplicativeExpr();
				}
				}
				State = 294;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplicativeExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PowerExprContext[] powerExpr() {
			return GetRuleContexts<PowerExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PowerExprContext powerExpr(int i) {
			return GetRuleContext<PowerExprContext>(i);
		}
		public MultiplicativeExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicativeExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDialogueGrammarListener typedListener = listener as IDialogueGrammarListener;
			if (typedListener != null) typedListener.EnterMultiplicativeExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDialogueGrammarListener typedListener = listener as IDialogueGrammarListener;
			if (typedListener != null) typedListener.ExitMultiplicativeExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDialogueGrammarVisitor<TResult> typedVisitor = visitor as IDialogueGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicativeExprContext multiplicativeExpr() {
		MultiplicativeExprContext _localctx = new MultiplicativeExprContext(Context, State);
		EnterRule(_localctx, 62, RULE_multiplicativeExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 295;
			powerExpr();
			State = 300;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 30064771072L) != 0)) {
				{
				{
				State = 296;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 30064771072L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 297;
				powerExpr();
				}
				}
				State = 302;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PowerExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExprContext[] unaryExpr() {
			return GetRuleContexts<UnaryExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExprContext unaryExpr(int i) {
			return GetRuleContext<UnaryExprContext>(i);
		}
		public PowerExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_powerExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDialogueGrammarListener typedListener = listener as IDialogueGrammarListener;
			if (typedListener != null) typedListener.EnterPowerExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDialogueGrammarListener typedListener = listener as IDialogueGrammarListener;
			if (typedListener != null) typedListener.ExitPowerExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDialogueGrammarVisitor<TResult> typedVisitor = visitor as IDialogueGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPowerExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PowerExprContext powerExpr() {
		PowerExprContext _localctx = new PowerExprContext(Context, State);
		EnterRule(_localctx, 64, RULE_powerExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 303;
			unaryExpr();
			State = 308;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__34) {
				{
				{
				State = 304;
				Match(T__34);
				State = 305;
				unaryExpr();
				}
				}
				State = 310;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PostfixExprContext postfixExpr() {
			return GetRuleContext<PostfixExprContext>(0);
		}
		public UnaryExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDialogueGrammarListener typedListener = listener as IDialogueGrammarListener;
			if (typedListener != null) typedListener.EnterUnaryExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDialogueGrammarListener typedListener = listener as IDialogueGrammarListener;
			if (typedListener != null) typedListener.ExitUnaryExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDialogueGrammarVisitor<TResult> typedVisitor = visitor as IDialogueGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExprContext unaryExpr() {
		UnaryExprContext _localctx = new UnaryExprContext(Context, State);
		EnterRule(_localctx, 66, RULE_unaryExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 312;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__30 || _la==T__35) {
				{
				State = 311;
				_la = TokenStream.LA(1);
				if ( !(_la==T__30 || _la==T__35) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 314;
			postfixExpr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostfixExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExprContext primaryExpr() {
			return GetRuleContext<PrimaryExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PostfixExprContext postfixExpr() {
			return GetRuleContext<PostfixExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentExprListContext argumentExprList() {
			return GetRuleContext<ArgumentExprListContext>(0);
		}
		public PostfixExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfixExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDialogueGrammarListener typedListener = listener as IDialogueGrammarListener;
			if (typedListener != null) typedListener.EnterPostfixExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDialogueGrammarListener typedListener = listener as IDialogueGrammarListener;
			if (typedListener != null) typedListener.ExitPostfixExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDialogueGrammarVisitor<TResult> typedVisitor = visitor as IDialogueGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostfixExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PostfixExprContext postfixExpr() {
		return postfixExpr(0);
	}

	private PostfixExprContext postfixExpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PostfixExprContext _localctx = new PostfixExprContext(Context, _parentState);
		PostfixExprContext _prevctx = _localctx;
		int _startState = 68;
		EnterRecursionRule(_localctx, 68, RULE_postfixExpr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 317;
			primaryExpr();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 334;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 332;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
					case 1:
						{
						_localctx = new PostfixExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixExpr);
						State = 319;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 320;
						Match(T__16);
						State = 321;
						expr();
						State = 322;
						Match(T__17);
						}
						break;
					case 2:
						{
						_localctx = new PostfixExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixExpr);
						State = 324;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 325;
						Match(T__5);
						State = 326;
						Match(T__7);
						}
						break;
					case 3:
						{
						_localctx = new PostfixExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixExpr);
						State = 327;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 328;
						Match(T__5);
						State = 329;
						argumentExprList();
						State = 330;
						Match(T__7);
						}
						break;
					}
					} 
				}
				State = 336;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ArgumentExprListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignExprContext[] assignExpr() {
			return GetRuleContexts<AssignExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignExprContext assignExpr(int i) {
			return GetRuleContext<AssignExprContext>(i);
		}
		public ArgumentExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentExprList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDialogueGrammarListener typedListener = listener as IDialogueGrammarListener;
			if (typedListener != null) typedListener.EnterArgumentExprList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDialogueGrammarListener typedListener = listener as IDialogueGrammarListener;
			if (typedListener != null) typedListener.ExitArgumentExprList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDialogueGrammarVisitor<TResult> typedVisitor = visitor as IDialogueGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentExprListContext argumentExprList() {
		ArgumentExprListContext _localctx = new ArgumentExprListContext(Context, State);
		EnterRule(_localctx, 70, RULE_argumentExprList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 342;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 337;
					assignExpr();
					State = 338;
					Match(T__6);
					}
					} 
				}
				State = 344;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			}
			State = 345;
			assignExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public PrimaryExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDialogueGrammarListener typedListener = listener as IDialogueGrammarListener;
			if (typedListener != null) typedListener.EnterPrimaryExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDialogueGrammarListener typedListener = listener as IDialogueGrammarListener;
			if (typedListener != null) typedListener.ExitPrimaryExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDialogueGrammarVisitor<TResult> typedVisitor = visitor as IDialogueGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExprContext primaryExpr() {
		PrimaryExprContext _localctx = new PrimaryExprContext(Context, State);
		EnterRule(_localctx, 72, RULE_primaryExpr);
		try {
			State = 352;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
			case STRING:
			case BOOL:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 347;
				value();
				}
				break;
			case T__5:
				EnterOuterAlt(_localctx, 2);
				{
				State = 348;
				Match(T__5);
				State = 349;
				expr();
				State = 350;
				Match(T__7);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(DialogueGrammarParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(DialogueGrammarParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(DialogueGrammarParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(DialogueGrammarParser.IDENTIFIER, 0); }
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDialogueGrammarListener typedListener = listener as IDialogueGrammarListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDialogueGrammarListener typedListener = listener as IDialogueGrammarListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDialogueGrammarVisitor<TResult> typedVisitor = visitor as IDialogueGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 74, RULE_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 354;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 897201488265216L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 19: return declarator_sempred((DeclaratorContext)_localctx, predIndex);
		case 34: return postfixExpr_sempred((PostfixExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool declarator_sempred(DeclaratorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}
	private bool postfixExpr_sempred(PostfixExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 3);
		case 2: return Precpred(Context, 2);
		case 3: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,52,357,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,1,0,5,0,78,8,0,10,0,12,0,81,9,0,1,0,1,0,1,1,1,1,1,
		1,3,1,88,8,1,1,1,1,1,1,2,1,2,1,2,1,2,5,2,96,8,2,10,2,12,2,99,9,2,1,2,3,
		2,102,8,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,116,8,3,
		1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,125,8,4,1,5,1,5,1,5,1,5,1,5,1,5,3,5,133,
		8,5,1,6,1,6,1,6,5,6,138,8,6,10,6,12,6,141,9,6,1,6,1,6,1,7,1,7,1,8,1,8,
		1,9,1,9,1,9,1,9,3,9,153,8,9,1,10,1,10,1,10,1,10,1,10,1,11,5,11,161,8,11,
		10,11,12,11,164,9,11,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,
		1,13,1,13,3,13,178,8,13,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,16,1,
		16,1,16,5,16,191,8,16,10,16,12,16,194,9,16,1,16,1,16,1,17,1,17,1,17,1,
		17,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,5,19,210,8,19,10,19,12,19,213,
		9,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,225,8,20,1,
		21,1,21,1,21,5,21,230,8,21,10,21,12,21,233,9,21,1,21,1,21,1,22,1,22,1,
		22,5,22,240,8,22,10,22,12,22,243,9,22,1,23,1,23,1,24,1,24,1,24,1,24,1,
		24,3,24,252,8,24,1,25,1,25,1,26,1,26,1,26,5,26,259,8,26,10,26,12,26,262,
		9,26,1,27,1,27,1,27,5,27,267,8,27,10,27,12,27,270,9,27,1,28,1,28,1,28,
		5,28,275,8,28,10,28,12,28,278,9,28,1,29,1,29,1,29,5,29,283,8,29,10,29,
		12,29,286,9,29,1,30,1,30,1,30,5,30,291,8,30,10,30,12,30,294,9,30,1,31,
		1,31,1,31,5,31,299,8,31,10,31,12,31,302,9,31,1,32,1,32,1,32,5,32,307,8,
		32,10,32,12,32,310,9,32,1,33,3,33,313,8,33,1,33,1,33,1,34,1,34,1,34,1,
		34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,5,34,333,
		8,34,10,34,12,34,336,9,34,1,35,1,35,1,35,5,35,341,8,35,10,35,12,35,344,
		9,35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,3,36,353,8,36,1,37,1,37,1,37,0,
		2,38,68,38,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,
		44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,0,8,1,0,12,16,2,0,11,11,
		19,23,1,0,26,27,2,0,1,2,28,29,1,0,30,31,1,0,32,34,2,0,31,31,36,36,2,0,
		44,45,48,49,354,0,79,1,0,0,0,2,84,1,0,0,0,4,91,1,0,0,0,6,115,1,0,0,0,8,
		124,1,0,0,0,10,132,1,0,0,0,12,139,1,0,0,0,14,144,1,0,0,0,16,146,1,0,0,
		0,18,152,1,0,0,0,20,154,1,0,0,0,22,162,1,0,0,0,24,167,1,0,0,0,26,170,1,
		0,0,0,28,179,1,0,0,0,30,184,1,0,0,0,32,192,1,0,0,0,34,197,1,0,0,0,36,201,
		1,0,0,0,38,203,1,0,0,0,40,224,1,0,0,0,42,231,1,0,0,0,44,236,1,0,0,0,46,
		244,1,0,0,0,48,251,1,0,0,0,50,253,1,0,0,0,52,255,1,0,0,0,54,263,1,0,0,
		0,56,271,1,0,0,0,58,279,1,0,0,0,60,287,1,0,0,0,62,295,1,0,0,0,64,303,1,
		0,0,0,66,312,1,0,0,0,68,316,1,0,0,0,70,342,1,0,0,0,72,352,1,0,0,0,74,354,
		1,0,0,0,76,78,3,2,1,0,77,76,1,0,0,0,78,81,1,0,0,0,79,77,1,0,0,0,79,80,
		1,0,0,0,80,82,1,0,0,0,81,79,1,0,0,0,82,83,5,0,0,1,83,1,1,0,0,0,84,85,5,
		41,0,0,85,87,5,49,0,0,86,88,3,4,2,0,87,86,1,0,0,0,87,88,1,0,0,0,88,89,
		1,0,0,0,89,90,3,8,4,0,90,3,1,0,0,0,91,97,5,1,0,0,92,93,3,6,3,0,93,94,5,
		50,0,0,94,96,1,0,0,0,95,92,1,0,0,0,96,99,1,0,0,0,97,95,1,0,0,0,97,98,1,
		0,0,0,98,101,1,0,0,0,99,97,1,0,0,0,100,102,3,6,3,0,101,100,1,0,0,0,101,
		102,1,0,0,0,102,103,1,0,0,0,103,104,5,2,0,0,104,5,1,0,0,0,105,106,5,3,
		0,0,106,107,5,4,0,0,107,116,5,45,0,0,108,109,5,5,0,0,109,110,5,4,0,0,110,
		111,5,6,0,0,111,112,5,44,0,0,112,113,5,7,0,0,113,114,5,44,0,0,114,116,
		5,8,0,0,115,105,1,0,0,0,115,108,1,0,0,0,116,7,1,0,0,0,117,125,3,10,5,0,
		118,125,3,14,7,0,119,125,3,16,8,0,120,125,3,18,9,0,121,125,3,20,10,0,122,
		125,3,26,13,0,123,125,3,28,14,0,124,117,1,0,0,0,124,118,1,0,0,0,124,119,
		1,0,0,0,124,120,1,0,0,0,124,121,1,0,0,0,124,122,1,0,0,0,124,123,1,0,0,
		0,125,9,1,0,0,0,126,127,5,9,0,0,127,133,5,10,0,0,128,129,5,9,0,0,129,130,
		3,12,6,0,130,131,5,10,0,0,131,133,1,0,0,0,132,126,1,0,0,0,132,128,1,0,
		0,0,133,11,1,0,0,0,134,135,3,8,4,0,135,136,5,50,0,0,136,138,1,0,0,0,137,
		134,1,0,0,0,138,141,1,0,0,0,139,137,1,0,0,0,139,140,1,0,0,0,140,142,1,
		0,0,0,141,139,1,0,0,0,142,143,3,8,4,0,143,13,1,0,0,0,144,145,3,30,15,0,
		145,15,1,0,0,0,146,147,3,44,22,0,147,17,1,0,0,0,148,149,5,49,0,0,149,150,
		5,4,0,0,150,153,5,45,0,0,151,153,5,45,0,0,152,148,1,0,0,0,152,151,1,0,
		0,0,153,19,1,0,0,0,154,155,5,40,0,0,155,156,5,9,0,0,156,157,3,22,11,0,
		157,158,5,10,0,0,158,21,1,0,0,0,159,161,3,24,12,0,160,159,1,0,0,0,161,
		164,1,0,0,0,162,160,1,0,0,0,162,163,1,0,0,0,163,165,1,0,0,0,164,162,1,
		0,0,0,165,166,3,24,12,0,166,23,1,0,0,0,167,168,5,45,0,0,168,169,3,8,4,
		0,169,25,1,0,0,0,170,171,5,37,0,0,171,172,5,6,0,0,172,173,3,44,22,0,173,
		174,5,8,0,0,174,177,3,8,4,0,175,176,5,38,0,0,176,178,3,8,4,0,177,175,1,
		0,0,0,177,178,1,0,0,0,178,27,1,0,0,0,179,180,5,39,0,0,180,181,5,6,0,0,
		181,182,5,49,0,0,182,183,5,8,0,0,183,29,1,0,0,0,184,185,3,36,18,0,185,
		186,3,32,16,0,186,31,1,0,0,0,187,188,3,34,17,0,188,189,5,7,0,0,189,191,
		1,0,0,0,190,187,1,0,0,0,191,194,1,0,0,0,192,190,1,0,0,0,192,193,1,0,0,
		0,193,195,1,0,0,0,194,192,1,0,0,0,195,196,3,34,17,0,196,33,1,0,0,0,197,
		198,3,38,19,0,198,199,5,11,0,0,199,200,3,40,20,0,200,35,1,0,0,0,201,202,
		7,0,0,0,202,37,1,0,0,0,203,204,6,19,-1,0,204,205,5,49,0,0,205,211,1,0,
		0,0,206,207,10,1,0,0,207,208,5,17,0,0,208,210,5,18,0,0,209,206,1,0,0,0,
		210,213,1,0,0,0,211,209,1,0,0,0,211,212,1,0,0,0,212,39,1,0,0,0,213,211,
		1,0,0,0,214,225,3,48,24,0,215,216,5,9,0,0,216,217,3,42,21,0,217,218,5,
		10,0,0,218,225,1,0,0,0,219,220,5,9,0,0,220,221,3,42,21,0,221,222,5,7,0,
		0,222,223,5,10,0,0,223,225,1,0,0,0,224,214,1,0,0,0,224,215,1,0,0,0,224,
		219,1,0,0,0,225,41,1,0,0,0,226,227,3,40,20,0,227,228,5,7,0,0,228,230,1,
		0,0,0,229,226,1,0,0,0,230,233,1,0,0,0,231,229,1,0,0,0,231,232,1,0,0,0,
		232,234,1,0,0,0,233,231,1,0,0,0,234,235,3,40,20,0,235,43,1,0,0,0,236,241,
		3,48,24,0,237,238,5,7,0,0,238,240,3,48,24,0,239,237,1,0,0,0,240,243,1,
		0,0,0,241,239,1,0,0,0,241,242,1,0,0,0,242,45,1,0,0,0,243,241,1,0,0,0,244,
		245,3,52,26,0,245,47,1,0,0,0,246,252,3,52,26,0,247,248,3,66,33,0,248,249,
		3,50,25,0,249,250,3,48,24,0,250,252,1,0,0,0,251,246,1,0,0,0,251,247,1,
		0,0,0,252,49,1,0,0,0,253,254,7,1,0,0,254,51,1,0,0,0,255,260,3,54,27,0,
		256,257,5,24,0,0,257,259,3,54,27,0,258,256,1,0,0,0,259,262,1,0,0,0,260,
		258,1,0,0,0,260,261,1,0,0,0,261,53,1,0,0,0,262,260,1,0,0,0,263,268,3,56,
		28,0,264,265,5,25,0,0,265,267,3,56,28,0,266,264,1,0,0,0,267,270,1,0,0,
		0,268,266,1,0,0,0,268,269,1,0,0,0,269,55,1,0,0,0,270,268,1,0,0,0,271,276,
		3,58,29,0,272,273,7,2,0,0,273,275,3,58,29,0,274,272,1,0,0,0,275,278,1,
		0,0,0,276,274,1,0,0,0,276,277,1,0,0,0,277,57,1,0,0,0,278,276,1,0,0,0,279,
		284,3,60,30,0,280,281,7,3,0,0,281,283,3,60,30,0,282,280,1,0,0,0,283,286,
		1,0,0,0,284,282,1,0,0,0,284,285,1,0,0,0,285,59,1,0,0,0,286,284,1,0,0,0,
		287,292,3,62,31,0,288,289,7,4,0,0,289,291,3,62,31,0,290,288,1,0,0,0,291,
		294,1,0,0,0,292,290,1,0,0,0,292,293,1,0,0,0,293,61,1,0,0,0,294,292,1,0,
		0,0,295,300,3,64,32,0,296,297,7,5,0,0,297,299,3,64,32,0,298,296,1,0,0,
		0,299,302,1,0,0,0,300,298,1,0,0,0,300,301,1,0,0,0,301,63,1,0,0,0,302,300,
		1,0,0,0,303,308,3,66,33,0,304,305,5,35,0,0,305,307,3,66,33,0,306,304,1,
		0,0,0,307,310,1,0,0,0,308,306,1,0,0,0,308,309,1,0,0,0,309,65,1,0,0,0,310,
		308,1,0,0,0,311,313,7,6,0,0,312,311,1,0,0,0,312,313,1,0,0,0,313,314,1,
		0,0,0,314,315,3,68,34,0,315,67,1,0,0,0,316,317,6,34,-1,0,317,318,3,72,
		36,0,318,334,1,0,0,0,319,320,10,3,0,0,320,321,5,17,0,0,321,322,3,44,22,
		0,322,323,5,18,0,0,323,333,1,0,0,0,324,325,10,2,0,0,325,326,5,6,0,0,326,
		333,5,8,0,0,327,328,10,1,0,0,328,329,5,6,0,0,329,330,3,70,35,0,330,331,
		5,8,0,0,331,333,1,0,0,0,332,319,1,0,0,0,332,324,1,0,0,0,332,327,1,0,0,
		0,333,336,1,0,0,0,334,332,1,0,0,0,334,335,1,0,0,0,335,69,1,0,0,0,336,334,
		1,0,0,0,337,338,3,48,24,0,338,339,5,7,0,0,339,341,1,0,0,0,340,337,1,0,
		0,0,341,344,1,0,0,0,342,340,1,0,0,0,342,343,1,0,0,0,343,345,1,0,0,0,344,
		342,1,0,0,0,345,346,3,48,24,0,346,71,1,0,0,0,347,353,3,74,37,0,348,349,
		5,6,0,0,349,350,3,44,22,0,350,351,5,8,0,0,351,353,1,0,0,0,352,347,1,0,
		0,0,352,348,1,0,0,0,353,73,1,0,0,0,354,355,7,7,0,0,355,75,1,0,0,0,29,79,
		87,97,101,115,124,132,139,152,162,177,192,211,224,231,241,251,260,268,
		276,284,292,300,308,312,332,334,342,352
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
